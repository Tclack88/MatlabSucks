# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aOYNkHbyEXJ9lzpdQ2idV05VXCeg8JYT
"""

import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
import numpy as np

d1={'Flowrate':'high','flowrate': [200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600], 'dP': [600, 1200, 2000, 2800, 3700, 4700, 6100, 7400, 9000, 10400, 12100, 13900, 16000, 18300, 20700]}
d2={'Flowrate':'med','flowrate': [60, 80, 100, 120, 140, 160, 180, 200, 220, 240], 'dP': [110, 100, 90, 130, 180, 210, 290,380, 490, 580]}
# d2={'Flowrate':'med','flowrate': [60, 80, 100, 120, 140, 160, 180, 200, 220, 240], 'dP': [107.8, 98, 98.2, 127.4, 176.4, 205.8, 284.2,372.4, 480.2, 568.4]}
# d2={'Flowrate':'med','flowrate': [60, 80, 100, 120, 140, 160, 180, 200, 220, 240], 'dP': [10.78, 9.8, 8.82, 12.74, 17.64, 20.58,28.42, 37.24, 48.02, 56.84]}

# [10.78, 9.8, 8.82, 12.74, 17.64, 20.58,28.42, 37.24, 48.02, 56.84]

d3={'Flowrate':'low','flowrate': [10, 20, 30, 40, 50, 60, 70], 'dP': [115, 120, 130, 135, 138, 152, 165]}

df1 = pd.DataFrame.from_dict(d1)
df2 = pd.DataFrame.from_dict(d2)
df3 = pd.DataFrame.from_dict(d3)
df = pd.concat([df3,df2,df1],ignore_index=True)
# df

u = .001108 #viscosity Pa s from https://www.omnicalculator.com/physics/water-viscosity using T = 16C
p = 998.9 # kg/m^3  # density of water at T = 16C
d = 12.6e-3 # pipe diameter in meters
L = 1.5 # pipe length meters
def calc_f(dP, v):
  # Darcy friction factor
  # dP: pressure difference
  # d: pipe diameter
  # L: pipe length
  # v: flowrate
  # p: density
  return (dP*2*d)/(L*p*v**2)

def calc_Re(v):
  # Reynold's number
  # p: density
  # v: flowrate 
  # d: pipe diamter
  # u: viscosity (dynamic as opposed to kinematic)
  return p*v*d/u

# df.flowrate = df.flowrate.astype('int')
# df.dP = df.dP.astype('int')

df['metric_flowrate'] = df.flowrate/(3.6e6)
df['f'] = calc_f(df.dP,df.metric_flowrate)
df['Re'] = calc_Re(df.metric_flowrate)

df

# sb.set_style("darkgrid")
sb.set_theme(style="darkgrid", palette="muted")
plt.figure(figsize=(15,6))
sb.scatterplot(data=df,x='flowrate',y='dP', hue='Flowrate');

plt.figure(figsize=(6,6))
plt.xscale('log')
plt.yscale('log')
plt.title('Darcy friction factor f vs Reynolds number')
sb.scatterplot(data=df,x='Re',y='f',hue='Flowrate');
# xline = [10e6,10e7]
# yline = [60/x for x in xline]
# sb.lineplot(x = xline, y = yline);

lam_dat = df[df.Flowrate == 'low']
lam_dat.Re = lam_dat.Re.apply(np.log10)
lam_dat.f = lam_dat.f.apply(np.log10)
lam_dat

from sklearn.linear_model import LinearRegression
X = lam_dat.Re.values.reshape(-1, 1)  # values converts it into a numpy array
Y = lam_dat.f.values.reshape(-1, 1)  # -1 means that calculate the dimension of rows, but have 1 column

linear_regressor = LinearRegression()  # create object for the class
linear_regressor.fit(X, Y)  # perform linear regression
Y_pred = linear_regressor.predict(X) 
lam_dat['Y_pred'] = Y_pred

plt.scatter(X,Y);
plt.plot(lam_dat.Re, Y_pred);
plt.show()
slope = (Y_pred[-1] - Y_pred[0])/(X[-1]-X[0])
slope

df_cpy = df.copy()
df_cpy['pred'] = np.append(Y_pred, np.array([np.nan]*(df.shape[0] -len(Y_pred))))
df_cpy.Re = df_cpy.Re.apply(np.log10)
df_cpy.f = df_cpy.f.apply(np.log10)

plt.figure(figsize=(10,6))
plt.title('Darcy friction factor f vs Reynolds number')
sb.scatterplot(data=df_cpy,x='Re',y='f',hue='Flowrate');
sb.lineplot(data=df_cpy, x='Re',y='pred');
plt.text(x=-1,y=7.5,s='slope = -1.83', 
          fontdict=dict(color='black',size=15),
          bbox=dict(facecolor='white',alpha=0.5))

